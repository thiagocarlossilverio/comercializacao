<?phpclass Admin_Model_Contatos extends Zend_Db_Table {    protected $_name = 'contatos';    protected $_primary = 'id';    public $_view;    public function init() {        $viewRenderer = Zend_Controller_Action_HelperBroker::getStaticHelper('ViewRenderer');        $viewRenderer->init();        $this->_view = $viewRenderer->view;    }    public function GetDados($id) {        $sql = $this->select()                ->where("id = ?", $id);        if ($result = $this->fetchRow($sql)->toArray()) {            return $result;        }    }    public function Getcontato($id) {        $sql = $this->select()                ->setIntegrityCheck(false)                ->from(array("c" => $this->_name), array("*"))                ->joinLeft(array("cc" => "clientes"), "c.cliente = cc.id", array("nome_cliente" => "cc.nome1", "email_cliente" => "cc.email"))                ->where("c.id = ?", $id)                ->order("c.id");        if ($result = $this->fetchRow($sql)) {            return $result->toArray();        } else {            return FALSE;        }    }    public function lista($vendedor) {        $sql = $this->select()                ->setIntegrityCheck(false)                ->from(array("c" => $this->_name), array("*"))                ->joinLeft(array("cc" => "clientes"), "c.cliente = cc.id", array("nome_cliente" => "cc.nome1"))                ->where('c.vendedor = ?', $vendedor)                ->order('c.id DESC');        if ($result = $this->fetchAll($sql)) {            return $result->toArray();        } else {            return FALSE;        }    }    public function insert(array $data) {        if (!is_array($data)) {            return false;        }        if (is_numeric($data['id'])) {            $this->update($data, "id = " . $data['id']);            return $data['id'];        }        $info = $this->info();        $data_insert = array_intersect_key($data, $info['metadata']);        parent::insert($data_insert);    }    public function update(array $data, $where) {        $info = $this->info();        $data_insert = array_intersect_key($data, $info['metadata']);        parent::update($data_insert, $where);    }    public function delete($where) {        return parent::delete($where);    }}